import time
import sys
import i2c_master
import mipi_csi
import xdma_reg_if

IMX471_BaseSettings = [
    # External Clock Setting: 24MHz 
    0x01,0x36,0x18, 0x01,0x37,0x00,

    # Register version 
    0x3C,0x7E,0x02, 0x3C,0x7F,0x05,

    # Global settings 
    0x3E,0x35,0x00, 0x3E,0x36,0x00, 0x3E,0x37,0x00, 0x3F,0x7F,0x01, 0x44,0x31,0x04, 0x53,0x1C,0x01,
    0x53,0x1D,0x02, 0x53,0x1E,0x04, 0x59,0x28,0x00, 0x59,0x29,0x2F, 0x59,0x2A,0x00, 0x59,0x2B,0x85,
    0x59,0x2C,0x00, 0x59,0x2D,0x32, 0x59,0x2E,0x00, 0x59,0x2F,0x88, 0x59,0x30,0x00, 0x59,0x31,0x3D,
    0x59,0x32,0x00, 0x59,0x33,0x93, 0x59,0x38,0x00, 0x59,0x39,0x24, 0x59,0x3A,0x00, 0x59,0x3B,0x7A,
    0x59,0x3C,0x00, 0x59,0x3D,0x24, 0x59,0x3E,0x00, 0x59,0x3F,0x7A, 0x59,0x40,0x00, 0x59,0x41,0x2F,
    0x59,0x42,0x00, 0x59,0x43,0x85, 0x5F,0x0E,0x6E, 0x5F,0x11,0xC6, 0x5F,0x17,0x5E, 0x79,0x90,0x01,
    0x79,0x93,0x5D, 0x79,0x94,0x5D, 0x79,0x95,0xA1, 0x79,0x9A,0x01, 0x79,0x9D,0x00, 0x81,0x69,0x01,
    0x83,0x59,0x01, 0x93,0x02,0x1E, 0x93,0x06,0x1F, 0x93,0x0A,0x26, 0x93,0x0E,0x23, 0x93,0x12,0x23,
    0x93,0x16,0x2C, 0x93,0x17,0x19, 0xB0,0x46,0x01, 0xB0,0x48,0x01,

    # Enable black level manual data pedestal 
    0x30,0x30,0x01,

    # 2328x1748(binned)Raw10, 72fps, MIPI 812Mbps 

    # MIPI output setting 
    0x01,0x12,0x0A, 0x01,0x13,0x0A, 0x01,0x14,0x03,

    # Line Length PCK Setting 
    0x03,0x42,0x0A, 0x03,0x43,0x00,

    # Frame length lines setting - default 72.062 fps 
    #0x03,0x40,0x07, 0x03,0x41,0x0C,

    # Frame length lines setting - 45.000 fps
    0x03,0x40,0x0B, 0x03,0x41,0x49,

    # ROI Setting */
    0x03,0x44,0x00, 0x03,0x45,0x00, 0x03,0x46,0x00, 0x03,0x47,0x00, 0x03,0x48,0x12, 0x03,0x49,0x2F,
    0x03,0x4A,0x0D, 0x03,0x4B,0xA7,

    # Mode Setting: 2x2 Binning summed Binning priority V, H 
    0x03,0x81,0x01, 0x03,0x83,0x01, 0x03,0x85,0x01, 0x03,0x87,0x01, 0x09,0x00,0x01, 0x09,0x01,0x22,
    0x09,0x02,0x09, 0x3F,0x4C,0x81, 0x3F,0x4D,0x81,

    # Digital Crop & Scaling */
    0x04,0x08,0x00, 0x04,0x09,0x00, 0x04,0x0A,0x00, 0x04,0x0B,0x00,
    0x04,0x0C,0x09, 0x04,0x0D,0x18, 0x04,0x0E,0x06, 0x04,0x0F,0xD4,

    # Output Size Setting 
    0x03,0x4C,0x09, 0x03,0x4D,0x18, 0x03,0x4E,0x06, 0x03,0x4F,0xD4,

    # Clock Setting
    0x03,0x01,0x06, #IVT_PXCK_DIV[4:0]
    0x03,0x03,0x02, #IVT_SYCK_DIV[2:0]
    0x03,0x05,0x0C, #IVT_PREPLLCK_DIV[3:0]
    0x03,0x06,0x01, #IVT_PLL_MPY[10:8]
    0x03,0x07,0xF3, #IVT_PLL_MPY[7:0]
    0x03,0x0B,0x01, #IOP_SYCK_DIV[4:0]
    0x03,0x0D,0x0C, #IOP_PREPLLCK_DIV[3:0]
    0x03,0x0E,0x01, #IOP_PLL_MPY[10:8]
    0x03,0x0F,0x96, #IOP_PLL_MPY[7:0]
    0x03,0x10,0x01, #PLL_MULT_DRIV (0 single 1 dual)

    # Other Settings 
    0x3F,0x78,0x01, 0x3F,0x79,0x31, 0x3F,0xFE,0x00, 0x3F,0xFF,0x8A, 0x5F,0x0A,0xB6,

    # Integration setting 
    0x02,0x02,0x06, 0x02,0x03,0xFA,

    # Gain Setting 
    0x02,0x04,0x00, 0x02,0x05,0x00, 0x02,0x0E,0x01, 0x02,0x0F,0x00,

    # Mode Transition Settings 
    0x3F,0x15,0x00,

    # Slave mode enabling 
    0x3F,0x0B,0x01, 0x30,0x41,0x00, 0x30,0x40,0x00, 0x03,0x50,0x00,
    0x3F,0x39,0x00, 0x3F,0x3A,0x0E, 0x3F,0x3B,0x1A,

    # Flash light strobe settings 
    0x0C,0x12,0xFF, 0x0C,0x14,0x00, 0x0C,0x15,0x00, 0x0C,0x1A,0x01,
    0x0C,0x1B,0x01,

    # Solid test patterns R = 0x3FF Gr = 0x110 B = 0x330 Gb = 0x110 
    0x06,0x02,0x03, 0x06,0x03,0xFF, 0x06,0x04,0x01, 0x06,0x05,0x10,
    0x06,0x06,0x03, 0x06,0x07,0x30, 0x06,0x08,0x01, 0x06,0x09,0x10
]

sensor_list = []

IMX471_sensor = {
    "IIC_MASTER_BASEADDR": 0x1000,
    "IIC_SCL_FREQ": 400000,
    "SYS_FREQ": 125000000,
    "IIC_SLA_ADDR": 0x34,
    "IIC_ADDR_SIZE": 2,
    "IIC_DATA_SIZE": 1, 
    "SENSOR_ID_HI_ADDR": 0x0016,
    "SENSOR_ID_LO_ADDR": 0x0017,
    "SENSOR_ID": 0x471,
    "MIPI_CSI_PHY_BASEADDR": 0x6000,
    "MIPI_LANES": 4,
    "SENSOR_SETTINGS": IMX471_BaseSettings
}

sensor_list.append(IMX471_sensor)

def SetupCamera(io_device, sensor_list):
    sensor_init = 0
    for sensor in sensor_list:
        iic_master_baseAddr = sensor["IIC_MASTER_BASEADDR"]
        iic_slv_addr = sensor["IIC_SLA_ADDR"] >> 1
        iic_scl = sensor["IIC_SCL_FREQ"]
        sys_freq = sensor["SYS_FREQ"]
        hi_addr = int(sensor["SENSOR_ID_HI_ADDR"])
        lo_addr = int(sensor["SENSOR_ID_LO_ADDR"])
        sensor_id = int(sensor["SENSOR_ID"])
        # Initialize IIC master bus
        iic_master = i2c_master.iic_master_driver(io_device, iic_slv_addr, iic_master_baseAddr, sys_freq, iic_scl)
        if(DetectSensor(iic_master, hi_addr, lo_addr, sensor_id)):
            InitCamera(iic_master, sensor, sensor["IIC_ADDR_SIZE"], sensor["IIC_DATA_SIZE"])
            sensor_init = sensor_init + 1
        else:
            print("{} sensor not found".format(str(sensor_id)))

    if(sensor_init == 0):
        print("No sensor found")
        return False
    return True
    
def InitCamera(iic_master, sensor, address_size, data_size):
    CSI_BaseAddr = sensor["MIPI_CSI_PHY_BASEADDR"]
    DPHY_BaseAddr = sensor["MIPI_CSI_PHY_BASEADDR"]
    Lanes = sensor["MIPI_LANES"]
    sensor_settings = sensor["SENSOR_SETTINGS"]

    # Soft reset the image sensor 
    SoftReset(iic_master)
    # Write sensor configuration 
    print("#------------- Write sensor settings -------------#")
    WriteConfigBlockToSensor(iic_master, sensor_settings, address_size, data_size)
    StartStream(iic_master)
    
    time.sleep(1)
    if(mipi_csi.MipiConfigLanes(iic_master.io_device, CSI_BaseAddr, Lanes) != True):
        mipi_csi.MipiVerifyStatus(iic_master.io_device, CSI_BaseAddr, DPHY_BaseAddr, Lanes)
    
    StartStream(iic_master)

    mipi_csi.MipiVerifyStatus(iic_master.io_device, CSI_BaseAddr, DPHY_BaseAddr, Lanes)


def DetectSensor(iic_master, hi_addr, lo_addr, sensor_id):
    data = 0
    ResetSensor(iic_master)
    data = iic_master.iic_read_A16D8(hi_addr) << 8
    data |= iic_master.iic_read_A16D8(lo_addr)
    if(data != int(sensor_id)):
        print("Error: Sensor not found")
        return False
    
    print("Found {} sensor".format(hex(data)))
    return True
    
def WriteConfigBlockToSensor(iic_master, sensor_config, address_size, data_size):
    read_data = 0
    camera_data = 0
    CamRegCnt = 0
    while(CamRegCnt < len(sensor_config)):
        camera_addr = int(sensor_config[CamRegCnt]) << 8
        camera_addr += int(sensor_config[CamRegCnt+1])
        camera_data = sensor_config[CamRegCnt+address_size]

        print("Sensor settings address {}, data {}".format(hex(camera_addr), hex(camera_data)))
        iic_master.iic_write_A16D8(camera_addr, camera_data)
        time.sleep(1)
        read_data = iic_master.iic_read_A16D8(camera_addr)
        print("Sensor read address {}, data {}".format(hex(camera_addr), hex(read_data)))
        if read_data != camera_data:
            sys.exit("ERROR: sensor register {}. WR {}, RD {}, at INDEX {} ".format(hex(camera_addr), hex(camera_data), hex(read_data), CamRegCnt))

        CamRegCnt += (address_size + data_size)

def StartStream(iic_master):
    Addr = int(0x0100)
    Data = int(0x1)
    iic_master.iic_write_A16D8(Addr, Data)
    print("Sensor start streaming")

def SoftReset(iic_master):
    Addr = int(0x0100)
    Data = int(0x0)
    iic_master.iic_write_A16D8(Addr, Data)
    print("Sensor soft reset")

def ResetSensor(iic_master):
    iic_master.iic_setgpo(0)
    time.sleep(3)
    iic_master.iic_setgpo(1)
    time.sleep(1)

